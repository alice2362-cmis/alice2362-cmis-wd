gedit (file name): edit that file.
gedit (anything): new file with that name
use gedit AND terminal: gedit (file name) &

ls (folder name): open that file and see the stuff in there
cat : look at the files in the folder
git commit: makes a snapshot that you can always go back to if you make a mistake at some point
git push: sends it back to the git hub website
git add (file name): makes git aware of the file. if you dont then it doesnt keep the changes to that file in the database. it specifies what files are in your repository.

make my name thing appear beside the green, in blue: type cd alice2362 (space?) tab

when you make a file you need to add the .txt after the name

orders: 
git add (name of file with the .txt)
git commit -m "edited _____"
git push

	make an html folder and view it on localhost: 8000 :
clone, make the terminal be based on your repository folder, create an html folder, edit files in it, save, validate, copy and paste the python code, view it on localhost: 8000

	"turning" sth in:
sftp alice2362@cmis-hsteacher
type yes
type ur username and password where necessary
ls: files in ur public html folder. after 'put'ing u should be able to see that file in the ls
!ls : show files in ur local comp

type: cd public_html/
put <file name> : move that file from ur comp to remote computer (mr kieffer"s). it's like turning it in

http://cmis-hsteacher/~alice2362/(file name u've shared to public files) : see the file u shared with the remote computer
(squiggle username: your public files)

tip: when 'put'ing, you can just do put (first letter or two of the folder you're gonna 'put' if it's the only file in your repository folder that starts with that letter) and then tab, and it will just type the full name of the file for you. enter.

add link:
<nav>	
	<ul or ol>
		<li> <a href="/nameoffile.html/">html</a> </li>
	</ul or /ol>
</nav>

html
head
title
<meta charset="utf-8" />
link to css if needed
body
header
nav
main
h's
p
close main

